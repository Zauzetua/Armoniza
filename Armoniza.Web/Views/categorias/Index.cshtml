@model IEnumerable<Armoniza.Domain.Entities.categoria>

@{
    ViewData["Title"] = "Categorías";
}



  


  


<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h2 class="text-primary"><i class="bi bi-folder"></i> Categorías</h2>
        <a asp-action="Create" class="btn btn-success btn-animado"><i class="bi bi-plus-circle"></i> Nueva Categoría</a>
    </div>

    <!-- Barra de búsqueda-->
    <div class="row">
        <div class="col-sm-12 col-md-8 d-flex" style="margin-bottom:10px">
            <input type="text" id="searchInput" class="form-control me-2 w-75 barra-busqueda" placeholder="Buscar Categoria" />
        </div>

        <!-- Selector de items por página -->
        <div class="input-group col-sm-12 col-md-8 d-flex"style="flex-grow:1; min-width:150px; margin-bottom:1%;">
            <select class="form-select" id="itemsPerPageSelect" onchange="changeItemsPerPage()">
                
                <option value="5" selected>Por Pagina</option>
                <option value="3">3</option>
                <option value="10">10</option>
                <option value="20">20</option>
                
            </select>
            
        </div>
    </div>


    <div class="card shadow-lg">
        <div class="card-body">
            <table class="table table-striped table-hover">
                <thead class="table-dark">
                    <tr>
                        <th><i class="bi bi-tag"></i> Nombre</th>
                        <th class="text-center">Acciones</th>
                    </tr>
                </thead>
                <tbody id="categoriesTableBody">
                    @foreach (var item in Model)
                    {
                        <tr>
                            <td>@Html.DisplayFor(modelItem => item.categoria1)</td>

                            <td class="text-center">
                                <a asp-action="Edit" asp-route-id="@item.id" class="btn btn-warning btn-sm btn-animado"><i class="bi bi-pencil"></i> Editar</a>
                                <a asp-action="Details" asp-route-id="@item.id" class="btn btn-info btn-sm text-white btn-animado"><i class="bi bi-eye"></i> Ver</a>
                                <a asp-action="Delete" asp-route-id="@item.id" class="btn btn-danger btn-sm btn-animado"><i class="bi bi-trash"></i> Eliminar</a>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>

                <!-- Controles de paginación -->
                <div class="row">
                    <div class="col-12">
                        <nav aria-label="Page navigation">
                            <ul class="pagination justify-content-center" id="paginationControls">
                                <!-- Los botones se generarán dinámicamente con JavaScript -->
                            </ul>
                        </nav>
                    </div>
                </div>
            </div>
        </div>


        </div>
    </div>
</div>

    @section Scripts {
        <script>

           // Configuración
        let itemsPerPage = parseInt(document.getElementById('itemsPerPageSelect').value);
        let currentPage = 1;
        let filteredData = [];
        let allData = [];

        // Inicialización
        document.addEventListener('DOMContentLoaded', function() {
            // Guardar todos los datos iniciales
            allData = Array.from(document.querySelectorAll('#categoriesTableBody tr'));
            filteredData = [...allData];

            // Mostrar primera página
            updateTable();

            // Configurar eventos
            document.getElementById('searchInput').addEventListener('input', function() {
                currentPage = 1;
                filterTable();
            });

            document.getElementById('searchInput').addEventListener('keypress', function(e) {
                if (e.key === 'Enter') {
                    currentPage = 1;
                    filterTable();
                }
            });
        });

        // Función para cambiar la cantidad de items por página
        function changeItemsPerPage() {
            itemsPerPage = parseInt(document.getElementById('itemsPerPageSelect').value);
            currentPage = 1;
            updateTable();
        }

        // Función de filtrado
        function filterTable() {
            const searchTerm = document.getElementById('searchInput').value.toLowerCase();

            filteredData = allData.filter(row => {
                const categoryName = row.querySelector('td:first-child').textContent.toLowerCase();
                return categoryName.includes(searchTerm);
            });

            currentPage = 1; // Resetear a la primera página al filtrar
            updateTable();
        }

        // Función para actualizar la tabla con la página actual
        function updateTable() {
            const startIndex = (currentPage - 1) * itemsPerPage;
            const endIndex = startIndex + itemsPerPage;
            const paginatedItems = filteredData.slice(startIndex, endIndex);

            // Ocultar todas las filas
            allData.forEach(row => {
                row.style.display = 'none';
            });

            // Mostrar solo las filas de la página actual
            paginatedItems.forEach(row => {
                row.style.display = '';
            });

            // Actualizar controles de paginación
            updatePaginationControls();
        }

        // Función para actualizar los controles de paginación
        function updatePaginationControls() {
            const totalPages = Math.ceil(filteredData.length / itemsPerPage);
            const paginationControls = document.getElementById('paginationControls');
            paginationControls.innerHTML = '';

            if (totalPages <= 1) return; // No mostrar paginación si solo hay una página

            // Botón Anterior
            const prevButton = document.createElement('li');
            prevButton.className = `page-item ${currentPage === 1 ? 'disabled' : ''}`;
            prevButton.innerHTML = `<a class="page-link" href="#" aria-label="Previous" onclick="changePage(${currentPage - 1})">
                                    <span aria-hidden="true">&laquo;</span>
                                </a>`;
            paginationControls.appendChild(prevButton);

            // Números de página
            const maxVisiblePages = 10; // Máximo de números de página a mostrar
            let startPage = Math.max(1, currentPage - Math.floor(maxVisiblePages / 2));
            let endPage = Math.min(totalPages, startPage + maxVisiblePages - 1);

            if (endPage - startPage + 1 < maxVisiblePages) {
                startPage = Math.max(1, endPage - maxVisiblePages + 1);
            }

            if (startPage > 1) {
                const firstPageItem = document.createElement('li');
                firstPageItem.className = 'page-item';
                firstPageItem.innerHTML = `<a class="page-link" href="#" onclick="changePage(1)">1</a>`;
                paginationControls.appendChild(firstPageItem);

                if (startPage > 2) {
                    const ellipsisItem = document.createElement('li');
                    ellipsisItem.className = 'page-item disabled';
                    ellipsisItem.innerHTML = `<span class="page-link">...</span>`;
                    paginationControls.appendChild(ellipsisItem);
                }
            }

            for (let i = startPage; i <= endPage; i++) {
                const pageItem = document.createElement('li');
                pageItem.className = `page-item ${i === currentPage ? 'active' : ''}`;
                pageItem.innerHTML = `<a class="page-link" href="#" onclick="changePage(${i})">${i}</a>`;
                paginationControls.appendChild(pageItem);
            }

            if (endPage < totalPages) {
                if (endPage < totalPages - 1) {
                    const ellipsisItem = document.createElement('li');
                    ellipsisItem.className = 'page-item disabled';
                    ellipsisItem.innerHTML = `<span class="page-link">...</span>`;
                    paginationControls.appendChild(ellipsisItem);
                }

                const lastPageItem = document.createElement('li');
                lastPageItem.className = 'page-item';
                lastPageItem.innerHTML = `<a class="page-link" href="#" onclick="changePage(${totalPages})">${totalPages}</a>`;
                paginationControls.appendChild(lastPageItem);
            }

            // Botón Siguiente
            const nextButton = document.createElement('li');
            nextButton.className = `page-item ${currentPage === totalPages ? 'disabled' : ''}`;
            nextButton.innerHTML = `<a class="page-link" href="#" aria-label="Next" onclick="changePage(${currentPage + 1})">
                                    <span aria-hidden="true">&raquo;</span>
                                </a>`;
            paginationControls.appendChild(nextButton);
        }

        // Función para cambiar de página
        function changePage(page) {
            const totalPages = Math.ceil(filteredData.length / itemsPerPage);
            if (page < 1 || page > totalPages) return;
            currentPage = page;
            updateTable();

            // Scroll suave hacia arriba de la tabla
            document.querySelector('.card-body').scrollIntoView({ behavior: 'smooth' });
        }

        //===========================================================================================================
            //Función de filtrado
            function filterTable() {
                const searchTerm = document.getElementById('searchInput').value.toLowerCase();
                const rows = document.querySelectorAll('#categoriesTableBody tr');

                let hasResults = false;
                rows.forEach(row => {
                    const categoryName = row.querySelector('td:first-child').textContent.toLowerCase();
                    if (categoryName.includes(searchTerm)) {
                        row.style.display = '';
                        hasResults = true;
                    } else {
                        row.style.display = 'none';
                    }
                });

               
            }

            // Búsqueda al presionar Enter
            document.getElementById('searchInput').addEventListener('keypress', function(e) {
                if (e.key === 'Enter') {
                    filterTable();
                }
            });

            // Opcional: Búsqueda en tiempo real mientras escribe
             // document.getElementById('searchInput').addEventListener('input', filterTable);
        </script>
    }
